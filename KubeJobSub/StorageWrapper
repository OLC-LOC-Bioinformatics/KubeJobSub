#!/usr/bin/env python

from settings import AZURE_STORAGE_ACCOUNT, AZURE_SHARE_NAME, AZURE_STORAGE_KEY
from termcolor import colored
import subprocess
import argparse
import re
import os


def set_credentials():
    storage_account = input('Enter Azure storage account: ')
    share_name = input('Enter Azure share name: ')
    storage_key = input('Enter Azure storage key: ')
    with open('settings.py', 'w') as f:
        f.write("AZURE_STORAGE_ACCOUNT = '{}'\n".format(storage_account))
        f.write("AZURE_SHARE_NAME = '{}'\n".format(share_name))
        f.write("AZURE_STORAGE_KEY = '{}'\n".format(storage_key))
    print('Credentials set!')
    quit()


def check_credentials_set():
    if AZURE_SHARE_NAME is None or AZURE_STORAGE_ACCOUNT is None or AZURE_STORAGE_KEY is None:
        return False
    else:
        return True


def print_ls(subprocess_decoded_output, expression=None):
    lines = subprocess_decoded_output.split('\n')
    if 'Name' in lines[0]:
        for i in range(2, len(lines) - 1):
            filename = lines[i].split()[0]
            match_found = True
            if expression is not None:
                expression = expression.replace('*', '.*')
                if re.match(expression, filename) is None:
                    match_found = False
            if match_found:
                if filename.endswith('.gz'):
                    print(colored(filename, 'red', attrs=['bold']))
                elif filename.endswith('/'):
                    print(colored(filename, 'blue', attrs=['bold']))
                else:
                    print(filename)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='StorageWrapper: Using azure file shares is kind of a pain.'
                                                 'This wraps a bunch of Azure CLI file share commands into a more '
                                                 'linux-esque environment.')
    subparsers = parser.add_subparsers(help='SubCommand Help', dest='subparsers')
    set_credentials_subparser = subparsers.add_parser('set_credentials', help='Sets the azure file share and account'
                                                                              ' key as environment variables.')
    # LS TODO: Add further wildcard support.
    ls_subparser = subparsers.add_parser('ls', help='Lists files in a directory. Wildcard (*) can be used,'
                                                    ' but only in final part of expression. (you can ls foo/bar*.py, '
                                                    'but not foo*/bar.py)')
    ls_subparser.add_argument('ls_path',
                              nargs='?',  # This allows the argument to be optional so things behave like actual ls.
                              default=None,
                              type=str,
                              help='Name of the directory you want to list things for.')
    # MKDIR
    mkdir_subparser = subparsers.add_parser('mkdir', help='Makes a directory.')
    mkdir_subparser.add_argument('mkdir_path',
                                 type=str,
                                 help='Name of the directory you want to create. You cannot do nested dirs.')
    # UPLOAD TODO: Add wildcard support.
    upload_subparser = subparsers.add_parser('upload', help='Uploads a file to azure file storage')
    upload_subparser.add_argument('-l', '--local_file',
                                  type=str,
                                  help='Local file you want to upload.')
    upload_subparser.add_argument('-p', '--upload_path',
                                  type=str,
                                  default=None,
                                  help='Directory to upload to on cloud. Defaults to root of share. File will have'
                                       ' same name it does locally.')
    # DOWNLOAD
    # RM # TODO: Add recursive deletion.
    rm_subparser = subparsers.add_parser('rm', help='Deletes a file. For directory deletion, see rmdir ('
                                                        'which will be created at some point soon')
    rm_subparser.add_argument('delete_path',
                              type=str,
                              help='Full path on cloud to file you want deleted.')
    args = parser.parse_args()

    credentials_set = check_credentials_set()

    # Used if people want to change the credentials (different storage accounts, or whatever.
    if 'set_credentials' == args.subparsers:
        set_credentials()
    # Any of the rest of the commands need credentials set, so force user to do them if they haven't been set previously
    if credentials_set is False:
        print('Credentials not set! Please set them before proceeding.')
        set_credentials()

    # Now go through our commands!
    # LS
    if args.subparsers == 'ls':
        if args.ls_path is not None:
            # TODO: Can't currently use * in root dir. Fix tomorrow.
            if '*' in args.ls_path:
                ls_path = os.path.split(args.ls_path)[0]
                wildcard_expression = os.path.split(args.ls_path)[-1]
            else:
                ls_path = args.ls_path
                wildcard_expression = None
            output = subprocess.check_output('az storage file list --share-name {share} --account-name {account} --account-key {key}'
                                             ' --output table -p {path}'.format(share=AZURE_SHARE_NAME,
                                                                                account=AZURE_STORAGE_ACCOUNT,
                                                                                key=AZURE_STORAGE_KEY,
                                                                                path=ls_path), shell=True)
            decoded_output = output.decode('utf-8')
            print_ls(decoded_output, expression=wildcard_expression)
        else:
            output = subprocess.check_output('az storage file list --share-name {share} --account-name {account} --account-key {key}'
                                             ' --output table'.format(share=AZURE_SHARE_NAME,
                                                                      account=AZURE_STORAGE_ACCOUNT,
                                                                      key=AZURE_STORAGE_KEY), shell=True)
            decoded_output = output.decode('utf-8')
            print_ls(decoded_output)
    # MKDIR
    elif args.subparsers == 'mkdir':
        subprocess.call('az storage directory create --share-name {share} --account-name {account} --account-key {key}'
                        ' --name {dir_to_create}'.format(share=AZURE_SHARE_NAME,
                                                         account=AZURE_STORAGE_ACCOUNT,
                                                         key=AZURE_STORAGE_KEY,
                                                         dir_to_create=args.mkdir_path), shell=True)
    # UPLOAD
    elif args.subparsers == 'upload':
        # If no directory specifed, just upload to root of cloud storage system. Otherwise, upload to specified dir
        # on cloud.
        if args.upload_path is None:
            cloud_file = os.path.split(args.local_file)[-1]
        else:
            cloud_file = os.path.join(args.upload_path, os.path.split(args.local_file)[-1])
        subprocess.call('az storage file upload --share-name {share} --account-name {account} --account-key {key}'
                        ' --source {local_file} --path {cloud_file}'.format(share=AZURE_SHARE_NAME,
                                                                            account=AZURE_STORAGE_ACCOUNT,
                                                                            key=AZURE_STORAGE_KEY,
                                                                            local_file=args.local_file,
                                                                            cloud_file=cloud_file), shell=True)
    # DELETE
    elif args.subparsers == 'rm':
        subprocess.call('az storage file delete --share-name {share} --account-name {account} --account-key {key}'
                        ' --path {cloud_file}'.format(share=AZURE_SHARE_NAME,
                                                      account=AZURE_STORAGE_ACCOUNT,
                                                      key=AZURE_STORAGE_KEY,
                                                      cloud_file=args.delete_path), shell=True)

